#!/bin/bash

QEMU=$(which qemu-system-x86_64)
QEMU_IMG=$(which qemu-img)
OVMF=('/usr/share/ovmf/x64/OVMF.fd' '/usr/share/ovmf/OVMF.fd') 

# Host system specs
RAM=$(grep MemTotal /proc/meminfo | awk '{print int($2 /1000)}')
THREADS=$(lscpu | awk 'NR == 7 {print $4}')
CORES=$(lscpu | awk 'NR == 8 {print $4}')
SOCKETS=$(lscpu | awk 'NR == 9 {print $2}')
CPUS=$(($SOCKETS * $CORES * $THREADS))
SCREEN_RES=$(cat /sys/class/graphics/*/virtual_size | sed 's/,/x/')

# Defaults
DEFAULT_DISK_SIZE="10G"

# Flags
F_CREATE=0

# VM variables
declare -A VARS=( [ram]=${RAM}
                  [cpus]=$CPUS 
                  [sockets]=$SOCKETS
)

FLAGS=("-enable-kvm -sdl -cpu host -vga virtio") # Default flags, updated in start()

# Check qemu is installed
if [ -z $QEMU ] || [ -z $QEMU_IMG ]; then
    echo -e "\nERROR: qemu is not installed.\n"
    exit 1
fi

function usage() {
    echo "
Usage: easy-emu [options] [VM name]

-help       | -h               Show this help message
-host                          Show some basic host system info
-create     | -c               Create a new virtual machine 
-cpus       | -C [Num cpus]    Specify number of cpus. Default is host max
-sockets    | -S [Num sockets] Specify number of sockets. Default is host max
-iso        | -i [Path]        Path to OS ISO image
-memory     | -m [RAM in MB]   Specify RAM amount. Must specify unit (M = megabyte G = gigabyte). Default is host max
-size       | -s [Size]        Specify size of virtual disk. Must specify unit (M = megabyte G = gigabyte). Default is 10G              
-fullscreen | -f               Start in fullscreen. Ctrl-Alt-F to exit
-uefi                          Boot in UEFI mode. Requires OVMF 
          "
    exit 0
}

# Show some basic system info for host
function host() {
    echo "
Host specifications
--------------------------
Sockets:          $SOCKETS
Cores per socket: $CORES    
Threads per core: $THREADS
Total CPUs:       $CPUS
RAM:              $RAM M
Resolution:       $SCREEN_RES
"
    exit 0
}

# Create a qcow2 virtual HDD
function create_disk() {
    # Ensure VM doesn't exist
    if [ -e ${VARS[name]} ]; then
        echo -e "\n${VARS[name]} already exists.\n"
        exit 1
    fi
    
    # Check for ISO image
    if [ -z "${VARS[iso]}" ]; then
        echo -e "\nNo ISO image supplied.\n"
        exit 1
    fi 
    
    # Create qcow2 image
    if [ -z "${VARS[size]}" ]; then
        qemu-img create -f qcow2 -o size=$DEFAULT_DISK_SIZE ${VARS[name]}  > /dev/null 2>&1
    else
        qemu-img create -f qcow2 -o size=${VARS[size]} ${VARS[name]}  > /dev/null 2>&1
    fi
    
    # Check exit code of qemu-img. Exit on failure
    if [ ${PIPESTATUS} -gt 0 ]; then
        echo -e "\nFailed to create image.\n"
        exit 1
    fi
}

if [ $# -lt 1 ]; then
    usage
    exit 0
else
    
    VARS+=( [name]=${@: -1} )

    while [ $# -gt 0 ]; do
        case $1 in
            --help | -help | -h)
                usage
            ;; 
            --host | -host)
                host
            ;;
            --create | -create | -c)
                F_CREATE=1
                shift
            ;;
            --fullscreen | -fullscreen | -f)
                FLAGS+=( "-full-screen" )
                shift
            ;;
            --iso | -iso | -i)
                if [ ! -e $2 ]; then  
                   echo -e "\nISO not found.\n" 
                   exit 1
                fi 
                VARS+=( [iso]=$2 )
                shift; shift
            ;;
            --memory | -memory | -m)
                VARS+=( [ram]=$2 )
                shift; shift
            ;;
            --sockets | -sockets | -S)
                VARS+=( [sockets]=$2 )
                shift; shift
            ;;
            --cpus | -cpus | -C)
                VARS+=( [cpus]=$2 )
                shift; shift
            ;;
            --size | -size | -s)
                VARS+=( [size]=$2 )
                shift; shift
            ;;
            --uefi | -uefi)
                for i in "${OVMF[@]}"; do
                    if [ -e $i ]; then
                        UEFI_IMG=$i
                    fi
                done
                if [ -z $UEFI_IMG ]; then
                    echo -e "\nUnable to find OVMF. Is it installed?\n"
                    exit 1
                fi
                FLAGS+=( "-bios $UEFI_IMG" )
                shift
            ;;
            ${VARS[name]}) # Ignore VM name
                shift
            ;;
            *)
                usage
            ;;
        esac
    done
fi

function start() {    
    # Update flags 
    FLAGS+=( "-name ${VARS[name]}" "-drive file=${VARS[name]}" "-m ${VARS[ram]}" "-smp sockets=${VARS[sockets]},cores=${VARS[cpus]}" )

    if [ -n "${VARS[iso]}" ]; then
        FLAGS+=( "-cdrom ${VARS[iso]}" )
    fi
    
    # Check name was given at end
    for i in "${!VARS[@]}"; do
        if [[ "${VARS[$i]}" == "${VARS[name]}" && "$i" != "name" ]]; then
            usage
        fi
    done
    
    # Create disk if needed 
    if [ $F_CREATE -gt 0 ]; then
        create_disk
    fi
    
    # Check for VM and start
    if [ ! -e ${VARS[name]} ]; then
        echo -e "\nUnable find ${VARS[name]}. Check path or use -c to create it.\n"
        exit 1
    fi

    $QEMU ${FLAGS[@]}
}

start &
