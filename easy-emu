#!/bin/bash

QEMU=$(which qemu-system-x86_64)
QEMU_IMG=$(which qemu-img)
OVMF=('/usr/share/ovmf/x64/OVMF.fd' '/usr/share/ovmf/OVMF.fd')
UEFI_IMG=""

# Host system specs
RAM=$(grep MemTotal /proc/meminfo | awk '{print int($2 /1000)}')
THREADS=$(lscpu | awk 'NR == 7 {print $4}')
CORES=$(lscpu | awk 'NR == 8 {print $4}')
SOCKETS=$(lscpu | awk 'NR == 9 {print $2}')
CPUS=$(($SOCKETS * $CORES * $THREADS))
SCREEN_RES=$(cat /sys/class/graphics/*/virtual_size | sed 's/,/x/')

# Flags
F_CREATE=0
F_RUN=0
F_FULLSCREEN=0

# VM variables
ISO=""
SIZE=10
OPTS=""

# Check qemu is installed
if [ -z $QEMU ] || [ -z $QEMU_IMG ]; then
    echo "ERROR: qemu is not installed"
    exit 1
fi

function usage() {
    echo "
Usage: easy-emu [options]

-create | -c [vm name]      Create a new virtual machine 
-cpus                       Specify number of cpus. Default is host max
-iso | -i                   Path to OS ISO image
-memory | -m [RAM in MB]    Specify RAM amount. Default is host max
-run | -r [vm name]         Start an existing VM
-size | -s [Size in GB]     Specify size of virtual disk. Default is 10GB                
-fullscreen | -f            Start in fullscreen 
          "
    exit 0
}


function host() {
    echo "
Host specifications
--------------------------
Sockets:          $SOCKETS
Cores per socket: $CORES    
Threads per core: $THREADS
Total CPUs:       $CPUS
RAM:              $RAM M
Resolution:       $SCREEN_RES
"
    exit 0
}

function create_vm() {
    if [ -z $ISO ]; then
        echo "No ISO image supplied"
        exit 1
    fi    
    if [ -e "$NAME.img" ]; then
        echo "$NAME already exists"
        exit 1
    fi
    qemu-img create -f qcow2 -o size=$SIZE"G" $NAME".img";
    qemu-system-x86_64 $OPTS
}

function run_vm() {
    if [ ! -e "$NAME.img" ]; then
        echo "VM not found"
        exit 1
    fi
    qemu-system-x86_64 $OPTS
}

if [ $# -lt 1 ]; then
    usage
    exit 0
else
    while [ $# -gt 0 ]; do
        case $1 in
            --help | -help | -h)
                usage
            ;; 
            --host | -host)
                host
            ;;
            --create | -create | -c)
                F_CREATE=1
                NAME=$2
                shift; shift
            ;;
            --fullscreen | -fullscreen | -f)
                OPTS="-full-screen $OPTS"
                shift
            ;;
            --iso | -iso | -i)
                if [ ! -e $2 ]; then  
                   echo "ISO not found" 
                   exit 1
                fi 
                ISO=$2
                OPTS="-cdrom $ISO $OPTS"
                shift; shift
            ;;
            --memory | -memory | -m)
                RAM=$2
                shift; shift
            ;;
            --cpus | -cpus)
                CPUS=$2
                shift; shift
            ;;
            --run | -run | -r)
                F_RUN=1
                NAME=$2
                shift; shift
            ;;
            --size | -size | -s)
                SIZE=$2
                shift; shift
            ;;
            --uefi | -uefi)
                for i in "${OVMF[@]}"; do
                    if [ -e $i ]; then
                        UEFI_IMG=$i
                    fi
                done
                if [ -z UEFI_IMG ]; then
                    echo "Unable to find OVMF. Is it installed?"
                    exit 1
                fi
                OPTS="-bios $UEFI_IMG $OPTS"
                shift; shift
            ;;
            -test)
                shift
            ;;
        esac
    done
    OPTS="-name $NAME -enable-kvm -sdl -cpu host -vga virtio -drive file=$NAME".img" -m $RAM"m" -smp sockets=$SOCKETS,cores=$CPUS $OPTS"
fi

function start() {    
    F_ALL=$(($F_CREATE + $F_RUN))
    if [ $F_ALL -gt 1 ]; then 
        echo "Invalid flag combination"
        exit 1
    fi

    if [ $F_ALL -lt 1 ]; then
        echo "Nothing to do"
        exit 1
    fi
    
    if [ $F_CREATE -gt 0 ]; then
        create_vm
    fi
    
    if [ $F_RUN -gt 0 ]; then
        run_vm
    fi
}

start &
